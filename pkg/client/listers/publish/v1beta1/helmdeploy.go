/*
 * Copyright 2021 The KunStack Authors.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1beta1 "kunstack.com/pharos/pkg/apis/publish/v1beta1"
)

// HelmDeployLister helps list HelmDeploys.
// All objects returned here must be treated as read-only.
type HelmDeployLister interface {
	// List lists all HelmDeploys in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.HelmDeploy, err error)
	// HelmDeploys returns an object that can list and get HelmDeploys.
	HelmDeploys(namespace string) HelmDeployNamespaceLister
	HelmDeployListerExpansion
}

// helmDeployLister implements the HelmDeployLister interface.
type helmDeployLister struct {
	indexer cache.Indexer
}

// NewHelmDeployLister returns a new HelmDeployLister.
func NewHelmDeployLister(indexer cache.Indexer) HelmDeployLister {
	return &helmDeployLister{indexer: indexer}
}

// List lists all HelmDeploys in the indexer.
func (s *helmDeployLister) List(selector labels.Selector) (ret []*v1beta1.HelmDeploy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.HelmDeploy))
	})
	return ret, err
}

// HelmDeploys returns an object that can list and get HelmDeploys.
func (s *helmDeployLister) HelmDeploys(namespace string) HelmDeployNamespaceLister {
	return helmDeployNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HelmDeployNamespaceLister helps list and get HelmDeploys.
// All objects returned here must be treated as read-only.
type HelmDeployNamespaceLister interface {
	// List lists all HelmDeploys in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.HelmDeploy, err error)
	// Get retrieves the HelmDeploy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.HelmDeploy, error)
	HelmDeployNamespaceListerExpansion
}

// helmDeployNamespaceLister implements the HelmDeployNamespaceLister
// interface.
type helmDeployNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HelmDeploys in the indexer for a given namespace.
func (s helmDeployNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.HelmDeploy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.HelmDeploy))
	})
	return ret, err
}

// Get retrieves the HelmDeploy from the indexer for a given namespace and name.
func (s helmDeployNamespaceLister) Get(name string) (*v1beta1.HelmDeploy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("helmdeploy"), name)
	}
	return obj.(*v1beta1.HelmDeploy), nil
}
