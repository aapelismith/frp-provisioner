/*
 * Copyright 2021 The KunStack Authors.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
	v1beta1 "kunstack.com/pharos/pkg/apis/publish/v1beta1"
)

// FakeHelmDeploys implements HelmDeployInterface
type FakeHelmDeploys struct {
	Fake *FakePublishV1beta1
	ns   string
}

var helmdeploysResource = schema.GroupVersionResource{Group: "publish.kunstack.com", Version: "v1beta1", Resource: "helmdeploys"}

var helmdeploysKind = schema.GroupVersionKind{Group: "publish.kunstack.com", Version: "v1beta1", Kind: "HelmDeploy"}

// Get takes name of the helmDeploy, and returns the corresponding helmDeploy object, and an error if there is any.
func (c *FakeHelmDeploys) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta1.HelmDeploy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(helmdeploysResource, c.ns, name), &v1beta1.HelmDeploy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.HelmDeploy), err
}

// List takes label and field selectors, and returns the list of HelmDeploys that match those selectors.
func (c *FakeHelmDeploys) List(ctx context.Context, opts v1.ListOptions) (result *v1beta1.HelmDeployList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(helmdeploysResource, helmdeploysKind, c.ns, opts), &v1beta1.HelmDeployList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta1.HelmDeployList{ListMeta: obj.(*v1beta1.HelmDeployList).ListMeta}
	for _, item := range obj.(*v1beta1.HelmDeployList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested helmDeploys.
func (c *FakeHelmDeploys) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(helmdeploysResource, c.ns, opts))

}

// Create takes the representation of a helmDeploy and creates it.  Returns the server's representation of the helmDeploy, and an error, if there is any.
func (c *FakeHelmDeploys) Create(ctx context.Context, helmDeploy *v1beta1.HelmDeploy, opts v1.CreateOptions) (result *v1beta1.HelmDeploy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(helmdeploysResource, c.ns, helmDeploy), &v1beta1.HelmDeploy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.HelmDeploy), err
}

// Update takes the representation of a helmDeploy and updates it. Returns the server's representation of the helmDeploy, and an error, if there is any.
func (c *FakeHelmDeploys) Update(ctx context.Context, helmDeploy *v1beta1.HelmDeploy, opts v1.UpdateOptions) (result *v1beta1.HelmDeploy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(helmdeploysResource, c.ns, helmDeploy), &v1beta1.HelmDeploy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.HelmDeploy), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeHelmDeploys) UpdateStatus(ctx context.Context, helmDeploy *v1beta1.HelmDeploy, opts v1.UpdateOptions) (*v1beta1.HelmDeploy, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(helmdeploysResource, "status", c.ns, helmDeploy), &v1beta1.HelmDeploy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.HelmDeploy), err
}

// Delete takes name of the helmDeploy and deletes it. Returns an error if one occurs.
func (c *FakeHelmDeploys) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(helmdeploysResource, c.ns, name, opts), &v1beta1.HelmDeploy{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeHelmDeploys) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(helmdeploysResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1beta1.HelmDeployList{})
	return err
}

// Patch applies the patch and returns the patched helmDeploy.
func (c *FakeHelmDeploys) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.HelmDeploy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(helmdeploysResource, c.ns, name, pt, data, subresources...), &v1beta1.HelmDeploy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.HelmDeploy), err
}
